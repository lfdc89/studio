//INTRO

Spring MVC è un framework per realizzare applicazioni web basate sul modello MVC (Model-View-Controller).

- Model: si occupano di accedere ai dati necessari alla logica di buisiness implementata nell'applicazione.
- View: si occupano di creare l'interfaccia utilizzabile dall'utente e che espone i dati da esso richiesti.
- Controller: si occupano di implementare la vera logica di buisiness dell'applicazione, integrando le due
			  componenti precedenti. Esso riceve gli input dell'utente, gestisce i modelli per la ricerca
			  dei dati e crea le viste da restituire all'utente.
			  
Spring MVC mappa esattamente questi concetti, anche a livello di nomenclatura. All'interno di un'applicazione
Spring avremo quindi:

- Model: sono rappresentati dalle classi che a loro volta rappresentano gli oggetti gestiti e le classi di 
		 accesso al database.
- View: sono rappresentate dai vari file JSP (che vengono poi compilati in HTML) e da eventuali classi per
		l'esportazione in formati diversi da HTML (PDF, XLS, CSV,..).
- Controller: sono rappresentati da classi, chiamate Controller, che rimangono in ascolto su un determinato url
			  e, grazie ai Model e alle View, si occupano di gestire la richiesta dell'utente.
			  

// FUNZIONAMENTO E CONFIGURAZIONE
Il funzionamento di SpringMVC ruota tutto intorno alla DispatcherServlet, la quale permette di re-dirigere tutte
le chiamate della nostra applicazione verso il mondo di SpringMVC.

Come prima cosa bisogna configurare questa servlet. Quindi un war con Spring necessita di un web.xml, all'interno
del quale definire la DispatcherServlet.
Spring MVC al caricamento della servlet va alla ricerca di un file (all'interno di WEB-INF) chiamato 
{nome_servlet}-servlet.xml {nel caso in esame la servlet si chiama springmvc, quindi springmvc-servlet.xml),
che rappresenta il file di configurazione del framework. Al suo interno, infatti, vanno definiti tutti i bean
e le configurazioni da utilizzare in SpringMVC.

Spring sfrutta il paradigma "Convention over configuration", che prevede una configurazione minimale seguita da
un utilizzo attento di una serie di convenzioni.
Per esempio utilizzando Maven è consigliato utilizzare la cartella resources per tutti i file di configurazione 
dell’applicazione al posto della cartella WEB-INF. Grazie al parametro contextConfigLocation è possibile 
differenziare il percorso del (o dei) file XML di configurazione del contesto di Spring MVC. Quindi
nel web.xml andrebbe indicato:
<servlet>
	<servlet-name>springmvc</servlet-name>
	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
	<init-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath*:META-INF/spring/*.xml</param-value>
	</init-param>
	<load-on-startup>1</load-on-startup>
</servlet>
cosi ho indicato che sotto META-INF ho creato una cartella spring nella quale ci saranno le config di spring.
Mettendo *.xml ho indicato che potrei distrubire la configurazione in diversi xml (e.g. i bean in xml diversi).

Per ciascuna servlet utilizzata viene istanziato un WebApplicationContext, all'interno del quale vivono tutti i
bean definiti. Questo contesto viene agganciato allo standard ServletContext in modo da essere recuperato facilmente.
In questo speciale contesto sono presenti alcuni bean che configurano in maniera particolare SpringMVC.
I principali sono:
- HandlerMapping: bean che si occupa di mappare le url invocate dal client verso un particolare metodo o classe.
				  Di default il bean utilizza le java annotations.
- HandlerExceptionResolver: bean che gestisce l'output al client in caso di eccezioni.
- ViewResolver: bean che si occupa di identificare quale view caricare sulla base del nome in formato stringa.
- LocaleResolver: bean che gestisce l'internazionalizzazione.

// CONTROLLER 
I Controller rappresentano la vera anima del paradigma MVC: essi vengono invocati dal client e si occupano delle logiche
di buisiness. Inoltre possono esistere anche senza Model e View.
Il bean che si occupa di mappare url/metodo java è l'handlerMapping. Di default si utilizza il bean RequestMappingHandlerMapping
che permette di sfruttare le annotations per identificare i metodi da mappare.
Quindi con @Controller identifico una classe come controller, mentre con @RequestMapping assengo una funzione ad un url.

Spring consente di personalizzare a piacimento la signature del metodo (num e tipo di parametri).
Ecco un elenco dei principali parametri disponibili:
- @PathVariable: recuperati dal pattern
- @RequestParam: inviati via HTTP dal client
- @RequestHeader: per avere un valore tra gli header HTTP ricevuti
- @RequestBody: per avere direttamente il corpo della request
- HttpServletRequest, HttpServletResponse: per accedere ad oggetti nativi J2EE
- HttpSession: per sfruttare la sessione senza doverla recuparare manualmente dalla request
- InpuStream, OutputStream: per lavorare a basso livello direttamente sugli stream in ingresso ed uscita

Questi oggetti non dovranno essere recuperati: una volta inseriti nella signature del metodo diventeranno immediatamente disponibili.
Discorso analogo vale per i parametri di ritorno:
- void: funzione batch, che non produce alcun output verso il client
- string per invocare ViewResolver: a partire da questa stringa verrà recuperata una vista.
- string con prefisso redirect: per forzare una redirect verso un'altra url
- string con prefisso forward: per forzare il forward verso un altro handler
- ModelAndView: incapsulano sia il nome della vissta da caricare sia l'insieme dei dati da passare ad essa
- qualsiasi tipo di oggetto da convertire tramite un HttpMessageConverter (per esempio in JSON o XML) se il metodo è annotato con @ResponseBody

// VIEW RESOLVER
I controller delegano alle viste il compito di mostrare all'utente i contenuti in maniera presentabile.
Quando questi ritornano una stringa (che non inizi per forward o redirec) o un oggetto ModelAndView, significa che esso vuole delegare al motore
interno di SpringMVC la creazione di una vista (identificata dal valore della stringa o incapsulata nel ModelAndView).
Riassumendo:
Stringa --> ViewResolver --> View
Spring non fornisce alcun ViewResolver di default.

Il caso più classico di ViewResolver è l'InternalResourceViewResolver, che permette di identificare una View sulla base di risorse interne al progetto
come ad esempio JSP. Per inserire un InternalResourceViewResolver basta creare un bean:
<bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
	<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
	<property name="prefix" value="/WEB-INF/view/"/>
	<property name="suffix" value=".jsp"/>
</bean>
In questo modo abbiamo definito il nostro ViewResolver che sarà in grado di recuperare la JSP concatenando le stringhe "/WEB-INF/view" e ".jsp" al valore 
della stringa ritornata.
- viewClass: rappresenta la classe da cui ciascuna vista verrà istanziata. Se per esempio il nostro controller dovesse 
			 tornare home il ViewResolver cercherebbe la JSP in /WEB-INF/view/home.jsp. Inoltre se nel metodo handler 
			 viene istanziato o modificato un oggetto Model (o ModelAndView) esso viene passato alla JSP.
- Prefix: prefisso aggiunto automaticamente
- Suffix: suffisso aggiunto automaticamente
In questo modo abbiamo definito il nostro ViewResolver che sarà in grado di recuperare la JSP concatenando le stringhe /WEB-INF/view e .jsp al valore della 
stringa ritornata. Il parametro viewClass rappresenta la classe da cui ciascuna vista verrà istanziata. Se per esempio il nostro controller dovesse tornare 
home il ViewResolver cercherebbe la JSP in /WEB-INF/view/home.jsp

Inoltre se nel metodo handler viene istanziato o modificato un oggetto Model (o ModelAndView) esso viene passato alla JSP.
@RequestMapping(value="/pagina-personale", method=RequestMethod.GET)
    public String paginaPersonale(Model model) {
    model.addAttribute("nome", "Alberto");
    model.addAttribute("cognome", "Bottarini");
    return "pagina-personale";
}
In questo caso i parametri aggiunti all’oggetto Model vengono resi disponibili nella JSP.
<h1>Ciao <c:out value="${nome}" /> <c:out value="${cognome}" /></h1>

E' possibile scrivere dei ViewResolver personalizzati. ramite una configurazione mirata è possibile gestire ViewResolver multipli, organizzandoli in una sorta 
di serie ordinata dalla quale Spring MVC cercherà il resolver più adatto.
<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
	<property name="order" value="1" />
</bean>
Dato che ora nel WebApplicationContext saranno presenti due diversi View esolver, è necessario aggiungere in almeno uno di essi la proprietà order per identificarne 
la priorità. Impostando “1” come order del nuovo BeanNameViewResolver significherà che Spring MVC cercherà innanzitutto di utilizzare quest’ultimo come resolver e 
in caso di insuccesso passerà al precedente UrlBasedViewResolver.

// FORM